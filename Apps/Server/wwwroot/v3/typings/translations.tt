<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".d.ts" #>
//
//                                       PLEASE NOTE
//
// This file is generated by a T4 script. Any changes that you make to this file will be lost.
//

declare namespace VRS
{
    interface TranslatedStringsStatic
    {
<#
var serviceProvider = this.Host as IServiceProvider;
var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
foreach(Project project in dte.Solution.Projects) {
    if(project.Name == "VirtualRadar.WebSite") {
        var projectPath = Path.GetDirectoryName(project.FullName);
        var resxFileName = Path.Combine(projectPath, "WebSiteStrings.resx");
        var doc = XDocument.Load(resxFileName);
        var stringNames = doc.Root
            .DescendantNodes()
            .OfType<XElement>()
            .Where(r => r.Name == "data")
            .Select(r => r.Attribute("name"))
            .Where(r => r != null)
            .Select(r => r.Value)
            .OrderBy(r => r)
            .ToArray();
        var longestStringLength = stringNames.Select(r => r.Length).DefaultIfEmpty(0).Max();
        var declarationFormatString = String.Format("{{0,-{0}}}", longestStringLength + 1);

        foreach(var stringName in stringNames) {
            var formattedStringName = String.Format(declarationFormatString, String.Format("{0}:", stringName));
#>
        <#=formattedStringName#> string;
<#
        }
    }
}
#>

        DateUseGenetiveMonths: boolean;

        sayStopovers(stopovers: string[]) : string;
        formatHoursMinutesSeconds(hours: number, minutes: number, seconds: number, showZeroHours?: boolean) : string;
        formatEngines(countEngines: string, engineType: number) : string;
        formatWakeTurbulenceCategory(category: number, ignoreNone: boolean, expandedDescription: boolean) : string;
        formatRoute(from: string, to: string, via: string[]) : string;
        translateCountry(englishCountry: string) : string;
    }

    export var $$: TranslatedStringsStatic;
}